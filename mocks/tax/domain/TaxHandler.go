// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"
)

// TaxHandler is an autogenerated mock type for the TaxHandler type
type TaxHandler struct {
	mock.Mock
}

type TaxHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *TaxHandler) EXPECT() *TaxHandler_Expecter {
	return &TaxHandler_Expecter{mock: &_m.Mock}
}

// GetTax provides a mock function with given fields: ctx
func (_m *TaxHandler) GetTax(ctx echo.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TaxHandler_GetTax_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTax'
type TaxHandler_GetTax_Call struct {
	*mock.Call
}

// GetTax is a helper method to define mock.On call
//   - ctx echo.Context
func (_e *TaxHandler_Expecter) GetTax(ctx interface{}) *TaxHandler_GetTax_Call {
	return &TaxHandler_GetTax_Call{Call: _e.mock.On("GetTax", ctx)}
}

func (_c *TaxHandler_GetTax_Call) Run(run func(ctx echo.Context)) *TaxHandler_GetTax_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *TaxHandler_GetTax_Call) Return(_a0 error) *TaxHandler_GetTax_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaxHandler_GetTax_Call) RunAndReturn(run func(echo.Context) error) *TaxHandler_GetTax_Call {
	_c.Call.Return(run)
	return _c
}

// Routes provides a mock function with given fields: route
func (_m *TaxHandler) Routes(route *echo.Echo) {
	_m.Called(route)
}

// TaxHandler_Routes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Routes'
type TaxHandler_Routes_Call struct {
	*mock.Call
}

// Routes is a helper method to define mock.On call
//   - route *echo.Echo
func (_e *TaxHandler_Expecter) Routes(route interface{}) *TaxHandler_Routes_Call {
	return &TaxHandler_Routes_Call{Call: _e.mock.On("Routes", route)}
}

func (_c *TaxHandler_Routes_Call) Run(run func(route *echo.Echo)) *TaxHandler_Routes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*echo.Echo))
	})
	return _c
}

func (_c *TaxHandler_Routes_Call) Return() *TaxHandler_Routes_Call {
	_c.Call.Return()
	return _c
}

func (_c *TaxHandler_Routes_Call) RunAndReturn(run func(*echo.Echo)) *TaxHandler_Routes_Call {
	_c.Call.Return(run)
	return _c
}

// NewTaxHandler creates a new instance of TaxHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaxHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaxHandler {
	mock := &TaxHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
