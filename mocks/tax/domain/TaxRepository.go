// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	entity "tax-aggregator-service-demo/tax/entity"

	mock "github.com/stretchr/testify/mock"
)

// TaxRepository is an autogenerated mock type for the TaxRepository type
type TaxRepository struct {
	mock.Mock
}

type TaxRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *TaxRepository) EXPECT() *TaxRepository_Expecter {
	return &TaxRepository_Expecter{mock: &_m.Mock}
}

// GetCounterFees provides a mock function with given fields: startDate, endDate
func (_m *TaxRepository) GetCounterFees(startDate int64, endDate int64) ([]entity.CounterFee, error) {
	ret := _m.Called(startDate, endDate)

	var r0 []entity.CounterFee
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) ([]entity.CounterFee, error)); ok {
		return rf(startDate, endDate)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) []entity.CounterFee); ok {
		r0 = rf(startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.CounterFee)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaxRepository_GetCounterFees_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCounterFees'
type TaxRepository_GetCounterFees_Call struct {
	*mock.Call
}

// GetCounterFees is a helper method to define mock.On call
//   - startDate int64
//   - endDate int64
func (_e *TaxRepository_Expecter) GetCounterFees(startDate interface{}, endDate interface{}) *TaxRepository_GetCounterFees_Call {
	return &TaxRepository_GetCounterFees_Call{Call: _e.mock.On("GetCounterFees", startDate, endDate)}
}

func (_c *TaxRepository_GetCounterFees_Call) Run(run func(startDate int64, endDate int64)) *TaxRepository_GetCounterFees_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *TaxRepository_GetCounterFees_Call) Return(_a0 []entity.CounterFee, _a1 error) *TaxRepository_GetCounterFees_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaxRepository_GetCounterFees_Call) RunAndReturn(run func(int64, int64) ([]entity.CounterFee, error)) *TaxRepository_GetCounterFees_Call {
	_c.Call.Return(run)
	return _c
}

// GetDepositRpTotalAmount provides a mock function with given fields: startDate, endDate
func (_m *TaxRepository) GetDepositRpTotalAmount(startDate int64, endDate int64) ([]entity.DepositRpTotalAmount, error) {
	ret := _m.Called(startDate, endDate)

	var r0 []entity.DepositRpTotalAmount
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) ([]entity.DepositRpTotalAmount, error)); ok {
		return rf(startDate, endDate)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) []entity.DepositRpTotalAmount); ok {
		r0 = rf(startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.DepositRpTotalAmount)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaxRepository_GetDepositRpTotalAmount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDepositRpTotalAmount'
type TaxRepository_GetDepositRpTotalAmount_Call struct {
	*mock.Call
}

// GetDepositRpTotalAmount is a helper method to define mock.On call
//   - startDate int64
//   - endDate int64
func (_e *TaxRepository_Expecter) GetDepositRpTotalAmount(startDate interface{}, endDate interface{}) *TaxRepository_GetDepositRpTotalAmount_Call {
	return &TaxRepository_GetDepositRpTotalAmount_Call{Call: _e.mock.On("GetDepositRpTotalAmount", startDate, endDate)}
}

func (_c *TaxRepository_GetDepositRpTotalAmount_Call) Run(run func(startDate int64, endDate int64)) *TaxRepository_GetDepositRpTotalAmount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *TaxRepository_GetDepositRpTotalAmount_Call) Return(_a0 []entity.DepositRpTotalAmount, _a1 error) *TaxRepository_GetDepositRpTotalAmount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaxRepository_GetDepositRpTotalAmount_Call) RunAndReturn(run func(int64, int64) ([]entity.DepositRpTotalAmount, error)) *TaxRepository_GetDepositRpTotalAmount_Call {
	_c.Call.Return(run)
	return _c
}

// GetFees provides a mock function with given fields: startDate, endDate
func (_m *TaxRepository) GetFees(startDate int64, endDate int64) ([]entity.TotalFee, error) {
	ret := _m.Called(startDate, endDate)

	var r0 []entity.TotalFee
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) ([]entity.TotalFee, error)); ok {
		return rf(startDate, endDate)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) []entity.TotalFee); ok {
		r0 = rf(startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.TotalFee)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaxRepository_GetFees_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFees'
type TaxRepository_GetFees_Call struct {
	*mock.Call
}

// GetFees is a helper method to define mock.On call
//   - startDate int64
//   - endDate int64
func (_e *TaxRepository_Expecter) GetFees(startDate interface{}, endDate interface{}) *TaxRepository_GetFees_Call {
	return &TaxRepository_GetFees_Call{Call: _e.mock.On("GetFees", startDate, endDate)}
}

func (_c *TaxRepository_GetFees_Call) Run(run func(startDate int64, endDate int64)) *TaxRepository_GetFees_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *TaxRepository_GetFees_Call) Return(_a0 []entity.TotalFee, _a1 error) *TaxRepository_GetFees_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaxRepository_GetFees_Call) RunAndReturn(run func(int64, int64) ([]entity.TotalFee, error)) *TaxRepository_GetFees_Call {
	_c.Call.Return(run)
	return _c
}

// GetFeesPerDay provides a mock function with given fields: startTime, endTime
func (_m *TaxRepository) GetFeesPerDay(startTime int64, endTime int64) (*entity.TotalFee, error) {
	ret := _m.Called(startTime, endTime)

	var r0 *entity.TotalFee
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) (*entity.TotalFee, error)); ok {
		return rf(startTime, endTime)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) *entity.TotalFee); ok {
		r0 = rf(startTime, endTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.TotalFee)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(startTime, endTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaxRepository_GetFeesPerDay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeesPerDay'
type TaxRepository_GetFeesPerDay_Call struct {
	*mock.Call
}

// GetFeesPerDay is a helper method to define mock.On call
//   - startTime int64
//   - endTime int64
func (_e *TaxRepository_Expecter) GetFeesPerDay(startTime interface{}, endTime interface{}) *TaxRepository_GetFeesPerDay_Call {
	return &TaxRepository_GetFeesPerDay_Call{Call: _e.mock.On("GetFeesPerDay", startTime, endTime)}
}

func (_c *TaxRepository_GetFeesPerDay_Call) Run(run func(startTime int64, endTime int64)) *TaxRepository_GetFeesPerDay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *TaxRepository_GetFeesPerDay_Call) Return(_a0 *entity.TotalFee, _a1 error) *TaxRepository_GetFeesPerDay_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaxRepository_GetFeesPerDay_Call) RunAndReturn(run func(int64, int64) (*entity.TotalFee, error)) *TaxRepository_GetFeesPerDay_Call {
	_c.Call.Return(run)
	return _c
}

// GetOldFees provides a mock function with given fields: startDate, endDate
func (_m *TaxRepository) GetOldFees(startDate int64, endDate int64) ([]entity.TotalFee, error) {
	ret := _m.Called(startDate, endDate)

	var r0 []entity.TotalFee
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) ([]entity.TotalFee, error)); ok {
		return rf(startDate, endDate)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) []entity.TotalFee); ok {
		r0 = rf(startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.TotalFee)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaxRepository_GetOldFees_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOldFees'
type TaxRepository_GetOldFees_Call struct {
	*mock.Call
}

// GetOldFees is a helper method to define mock.On call
//   - startDate int64
//   - endDate int64
func (_e *TaxRepository_Expecter) GetOldFees(startDate interface{}, endDate interface{}) *TaxRepository_GetOldFees_Call {
	return &TaxRepository_GetOldFees_Call{Call: _e.mock.On("GetOldFees", startDate, endDate)}
}

func (_c *TaxRepository_GetOldFees_Call) Run(run func(startDate int64, endDate int64)) *TaxRepository_GetOldFees_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *TaxRepository_GetOldFees_Call) Return(_a0 []entity.TotalFee, _a1 error) *TaxRepository_GetOldFees_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaxRepository_GetOldFees_Call) RunAndReturn(run func(int64, int64) ([]entity.TotalFee, error)) *TaxRepository_GetOldFees_Call {
	_c.Call.Return(run)
	return _c
}

// GetOldFeesPerDay provides a mock function with given fields: startTime, endTime
func (_m *TaxRepository) GetOldFeesPerDay(startTime int64, endTime int64) (*entity.TotalFee, error) {
	ret := _m.Called(startTime, endTime)

	var r0 *entity.TotalFee
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) (*entity.TotalFee, error)); ok {
		return rf(startTime, endTime)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) *entity.TotalFee); ok {
		r0 = rf(startTime, endTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.TotalFee)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(startTime, endTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaxRepository_GetOldFeesPerDay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOldFeesPerDay'
type TaxRepository_GetOldFeesPerDay_Call struct {
	*mock.Call
}

// GetOldFeesPerDay is a helper method to define mock.On call
//   - startTime int64
//   - endTime int64
func (_e *TaxRepository_Expecter) GetOldFeesPerDay(startTime interface{}, endTime interface{}) *TaxRepository_GetOldFeesPerDay_Call {
	return &TaxRepository_GetOldFeesPerDay_Call{Call: _e.mock.On("GetOldFeesPerDay", startTime, endTime)}
}

func (_c *TaxRepository_GetOldFeesPerDay_Call) Run(run func(startTime int64, endTime int64)) *TaxRepository_GetOldFeesPerDay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *TaxRepository_GetOldFeesPerDay_Call) Return(_a0 *entity.TotalFee, _a1 error) *TaxRepository_GetOldFeesPerDay_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaxRepository_GetOldFeesPerDay_Call) RunAndReturn(run func(int64, int64) (*entity.TotalFee, error)) *TaxRepository_GetOldFeesPerDay_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaxTransactions provides a mock function with given fields: startDate, endDate
func (_m *TaxRepository) GetTaxTransactions(startDate int64, endDate int64) ([]entity.TaxTransactionSummary, error) {
	ret := _m.Called(startDate, endDate)

	var r0 []entity.TaxTransactionSummary
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) ([]entity.TaxTransactionSummary, error)); ok {
		return rf(startDate, endDate)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) []entity.TaxTransactionSummary); ok {
		r0 = rf(startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.TaxTransactionSummary)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaxRepository_GetTaxTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaxTransactions'
type TaxRepository_GetTaxTransactions_Call struct {
	*mock.Call
}

// GetTaxTransactions is a helper method to define mock.On call
//   - startDate int64
//   - endDate int64
func (_e *TaxRepository_Expecter) GetTaxTransactions(startDate interface{}, endDate interface{}) *TaxRepository_GetTaxTransactions_Call {
	return &TaxRepository_GetTaxTransactions_Call{Call: _e.mock.On("GetTaxTransactions", startDate, endDate)}
}

func (_c *TaxRepository_GetTaxTransactions_Call) Run(run func(startDate int64, endDate int64)) *TaxRepository_GetTaxTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *TaxRepository_GetTaxTransactions_Call) Return(_a0 []entity.TaxTransactionSummary, _a1 error) *TaxRepository_GetTaxTransactions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaxRepository_GetTaxTransactions_Call) RunAndReturn(run func(int64, int64) ([]entity.TaxTransactionSummary, error)) *TaxRepository_GetTaxTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// GetTotalWithdrawRp provides a mock function with given fields: startDate, calculationDate
func (_m *TaxRepository) GetTotalWithdrawRp(startDate int64, calculationDate int64) ([]entity.TotalWithdrawRp, error) {
	ret := _m.Called(startDate, calculationDate)

	var r0 []entity.TotalWithdrawRp
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) ([]entity.TotalWithdrawRp, error)); ok {
		return rf(startDate, calculationDate)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) []entity.TotalWithdrawRp); ok {
		r0 = rf(startDate, calculationDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.TotalWithdrawRp)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(startDate, calculationDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaxRepository_GetTotalWithdrawRp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTotalWithdrawRp'
type TaxRepository_GetTotalWithdrawRp_Call struct {
	*mock.Call
}

// GetTotalWithdrawRp is a helper method to define mock.On call
//   - startDate int64
//   - calculationDate int64
func (_e *TaxRepository_Expecter) GetTotalWithdrawRp(startDate interface{}, calculationDate interface{}) *TaxRepository_GetTotalWithdrawRp_Call {
	return &TaxRepository_GetTotalWithdrawRp_Call{Call: _e.mock.On("GetTotalWithdrawRp", startDate, calculationDate)}
}

func (_c *TaxRepository_GetTotalWithdrawRp_Call) Run(run func(startDate int64, calculationDate int64)) *TaxRepository_GetTotalWithdrawRp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *TaxRepository_GetTotalWithdrawRp_Call) Return(_a0 []entity.TotalWithdrawRp, _a1 error) *TaxRepository_GetTotalWithdrawRp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaxRepository_GetTotalWithdrawRp_Call) RunAndReturn(run func(int64, int64) ([]entity.TotalWithdrawRp, error)) *TaxRepository_GetTotalWithdrawRp_Call {
	_c.Call.Return(run)
	return _c
}

// InsertTaxTransactions provides a mock function with given fields: transactionDate, taxTransactions
func (_m *TaxRepository) InsertTaxTransactions(transactionDate int64, taxTransactions []entity.TaxTransaction) error {
	ret := _m.Called(transactionDate, taxTransactions)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, []entity.TaxTransaction) error); ok {
		r0 = rf(transactionDate, taxTransactions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TaxRepository_InsertTaxTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertTaxTransactions'
type TaxRepository_InsertTaxTransactions_Call struct {
	*mock.Call
}

// InsertTaxTransactions is a helper method to define mock.On call
//   - transactionDate int64
//   - taxTransactions []entity.TaxTransaction
func (_e *TaxRepository_Expecter) InsertTaxTransactions(transactionDate interface{}, taxTransactions interface{}) *TaxRepository_InsertTaxTransactions_Call {
	return &TaxRepository_InsertTaxTransactions_Call{Call: _e.mock.On("InsertTaxTransactions", transactionDate, taxTransactions)}
}

func (_c *TaxRepository_InsertTaxTransactions_Call) Run(run func(transactionDate int64, taxTransactions []entity.TaxTransaction)) *TaxRepository_InsertTaxTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].([]entity.TaxTransaction))
	})
	return _c
}

func (_c *TaxRepository_InsertTaxTransactions_Call) Return(_a0 error) *TaxRepository_InsertTaxTransactions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaxRepository_InsertTaxTransactions_Call) RunAndReturn(run func(int64, []entity.TaxTransaction) error) *TaxRepository_InsertTaxTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// NewTaxRepository creates a new instance of TaxRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaxRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaxRepository {
	mock := &TaxRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
