// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	domain "tax-aggregator-service-demo/tax/domain"

	mock "github.com/stretchr/testify/mock"
)

// TaxUsecase is an autogenerated mock type for the TaxUsecase type
type TaxUsecase struct {
	mock.Mock
}

type TaxUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *TaxUsecase) EXPECT() *TaxUsecase_Expecter {
	return &TaxUsecase_Expecter{mock: &_m.Mock}
}

// FetchSourceTax provides a mock function with given fields: taxSourceDate
func (_m *TaxUsecase) FetchSourceTax(taxSourceDate *domain.TaxSourceDate) (*domain.TaxResponse, error) {
	ret := _m.Called(taxSourceDate)

	var r0 *domain.TaxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.TaxSourceDate) (*domain.TaxResponse, error)); ok {
		return rf(taxSourceDate)
	}
	if rf, ok := ret.Get(0).(func(*domain.TaxSourceDate) *domain.TaxResponse); ok {
		r0 = rf(taxSourceDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.TaxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.TaxSourceDate) error); ok {
		r1 = rf(taxSourceDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaxUsecase_FetchSourceTax_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchSourceTax'
type TaxUsecase_FetchSourceTax_Call struct {
	*mock.Call
}

// FetchSourceTax is a helper method to define mock.On call
//   - taxSourceDate *domain.TaxSourceDate
func (_e *TaxUsecase_Expecter) FetchSourceTax(taxSourceDate interface{}) *TaxUsecase_FetchSourceTax_Call {
	return &TaxUsecase_FetchSourceTax_Call{Call: _e.mock.On("FetchSourceTax", taxSourceDate)}
}

func (_c *TaxUsecase_FetchSourceTax_Call) Run(run func(taxSourceDate *domain.TaxSourceDate)) *TaxUsecase_FetchSourceTax_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.TaxSourceDate))
	})
	return _c
}

func (_c *TaxUsecase_FetchSourceTax_Call) Return(_a0 *domain.TaxResponse, _a1 error) *TaxUsecase_FetchSourceTax_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaxUsecase_FetchSourceTax_Call) RunAndReturn(run func(*domain.TaxSourceDate) (*domain.TaxResponse, error)) *TaxUsecase_FetchSourceTax_Call {
	_c.Call.Return(run)
	return _c
}

// GetTax provides a mock function with given fields: taxDate
func (_m *TaxUsecase) GetTax(taxDate *domain.TaxDate) (*domain.TaxResponse, error) {
	ret := _m.Called(taxDate)

	var r0 *domain.TaxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.TaxDate) (*domain.TaxResponse, error)); ok {
		return rf(taxDate)
	}
	if rf, ok := ret.Get(0).(func(*domain.TaxDate) *domain.TaxResponse); ok {
		r0 = rf(taxDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.TaxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.TaxDate) error); ok {
		r1 = rf(taxDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaxUsecase_GetTax_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTax'
type TaxUsecase_GetTax_Call struct {
	*mock.Call
}

// GetTax is a helper method to define mock.On call
//   - taxDate *domain.TaxDate
func (_e *TaxUsecase_Expecter) GetTax(taxDate interface{}) *TaxUsecase_GetTax_Call {
	return &TaxUsecase_GetTax_Call{Call: _e.mock.On("GetTax", taxDate)}
}

func (_c *TaxUsecase_GetTax_Call) Run(run func(taxDate *domain.TaxDate)) *TaxUsecase_GetTax_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.TaxDate))
	})
	return _c
}

func (_c *TaxUsecase_GetTax_Call) Return(_a0 *domain.TaxResponse, _a1 error) *TaxUsecase_GetTax_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaxUsecase_GetTax_Call) RunAndReturn(run func(*domain.TaxDate) (*domain.TaxResponse, error)) *TaxUsecase_GetTax_Call {
	_c.Call.Return(run)
	return _c
}

// NewTaxUsecase creates a new instance of TaxUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaxUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaxUsecase {
	mock := &TaxUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
